## create new ECS cluster
#resource "aws_ecs_cluster" "main" {
#  name = var.name
#}
#
#resource "aws_launch_configuration" "main" {
#  #(Optional) Creates a unique name beginning with the specified prefix. Conflicts with name.
#  name_prefix = "${var.name}-"
#  #(Required) The EC2 image ID to launch.
#  image_id = "ami-086ca990ae37efc1b" // amzn2-ami-ecs-hvm-2.0.20190301-x86_64-ebs
#  #(Required) The size of instance to launch.
#  instance_type = var.instance_type
#  #(Optional) The name attribute of the IAM instance profile to associate with launched instances.
#  iam_instance_profile = "ecsInstanceRole"
#
#  #(Optional) The key name that should be used for the instance.
#  key_name = var.keypair
#  #(Optional) A list of associated security group IDS.
#  security_groups = var.security_groups
#
#  #(Optional) The user data to provide when launching the instance. Do not pass gzip-compressed data via this argument; see user_data_base64 instead.
#  user_data = "#!/bin/bash\necho ECS_CLUSTER=${aws_ecs_cluster.main.name} > /etc/ecs/ecs.config"
#  #(Optional) If true, the launched EC2 instance will be EBS-optimized.
#  ebs_optimized = false
#
#  root_block_device {
#    #(Optional) The type of volume. Can be standard, gp2, gp3, st1, sc1 or io1.
#    volume_type = "standard"
#    #(Optional) The size of the volume in gigabytes.
#    volume_size = 30
#    #(Optional) Whether the volume should be destroyed on instance termination. Defaults to true.
#    delete_on_termination = true
#  }
#
#  lifecycle {
#    create_before_destroy = true
#  }
#}
#
#resource "aws_autoscaling_group" "main" {
#  #(Optional) Name of the Auto Scaling Group. By default generated by Terraform. Conflicts with name_prefix.
#  name = var.name
#  #(Optional) Name of the launch configuration to use.
#  launch_configuration = aws_launch_configuration.main.name
#  #(Optional) List of subnet IDs to launch resources in. Subnets automatically determine which availability zones the group will reside. Conflicts with availability_zones.
#  vpc_zone_identifier = var.subnets
#
#  #(Required) Minimum size of the Auto Scaling Group. (See also Waiting for Capacity below.)
#  min_size = var.cluster_min_size
#  #(Required) Maximum size of the Auto Scaling Group.
#  max_size = var.cluster_max_size
#  #(Optional) Number of Amazon EC2 instances that should be running in the group. (See also Waiting for Capacity below.)
#  desired_capacity = var.cluster_desired_capacity
#
#  tag {
#    key                 = "Name"
#    value               = "ecs-${var.name}"
#    propagate_at_launch = true
#  }
#  tag {
#    key                 = "Environment"
#    value               = var.environment
#    propagate_at_launch = true
#  }
#  tag {
#    key                 = "TerraformManaged"
#    value               = "true"
#    propagate_at_launch = true
#  }
#}
#
